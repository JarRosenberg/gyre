! Module  : system_m
! Purpose : operating system support

#:include 'core.inc'

module system_m

   ! Uses

   use kinds_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Interfaces

   #:for S in MATH_SUFFIXES+CHAR_SUFFIXES

      interface get_arg
         module procedure get_arg_${S}$_
      end interface get_arg

      interface get_env
         module procedure get_env_${S}$_
      end interface get_env

   #:endfor

   ! Access specifiers

   public :: n_arg
   public :: get_arg
   public :: get_env

   ! Default access

   private

contains

   function n_arg()

      integer :: n_arg

      ! Get the number of arguments

      n_arg = COMMAND_ARGUMENT_COUNT()

      ! Finish

      return

   end function n_arg

   !****

   #:for T, S in zip(MATH_TYPES, MATH_SUFFIXES)

      subroutine get_arg_${S}$_(number, value, status)

         integer, intent(in)            :: number
         ${T}$, intent(out)             :: value
         integer, optional, intent(out) :: status

         integer                   :: length
         integer                   :: status_
         character(:), allocatable :: buffer

         ! Read the numbered command argument

         ! Determine the argument length

         call GET_COMMAND_ARGUMENT(number, LENGTH=length, STATUS=status_)

         if (PRESENT(status)) then
            status = status_
            if (status_ /= 0) return
         else
            @:ASSERT(status_ == 0, 'error when reading command argument')
         endif

         ! Read the argument into a character buffer

         allocate(character(length)::buffer)

         call GET_COMMAND_ARGUMENT(number, buffer)

         ! Extract the value from the buffer

         read(buffer, *) value

         ! Finish

         return

      end subroutine get_arg_${S}$_

   #:endfor

   !****

   subroutine get_arg_a_(number, value, status)

      integer, intent(in)                    :: number
      character(:), allocatable, intent(out) :: value
      integer, optional, intent(out)         :: status

      integer :: length
      integer :: status_

      ! Read the numbered command argument

      ! Determine the argument length

      call GET_COMMAND_ARGUMENT(number, LENGTH=length, STATUS=status_)

      if (PRESENT(status)) then
         status = status_
         if (status_ /= 0) return
      else
         @:ASSERT(status_ == 0, 'error when reading command argument')
      endif

      ! Read the argument

      if (length > 0) then
         allocate(character(length)::value)
         call GET_COMMAND_ARGUMENT(number, value)
      endif

      ! Finish

      return

   end subroutine get_arg_a_

   !****

   #:for T, S in zip(MATH_TYPES, MATH_SUFFIXES)
   
      subroutine get_env_${S}$_(name, value, status)

         character(*), intent(in)       :: name
         ${T}$, intent(out)             :: value
         integer, optional, intent(out) :: status

         integer                   :: length
         integer                   :: status_
         character(:), allocatable :: buffer

         ! Read the named environment variable

         ! Determine the variable length

         call GET_ENVIRONMENT_VARIABLE(name, LENGTH=length, STATUS=status_)

         if (PRESENT(status)) then
            status = status_
            if (status_ /= 0) return
         else
            @:ASSERT(status_ == 0, 'error when reading environment variable')
         endif

         ! Read the variable into a character buffer

         allocate(character(length)::buffer)

         call GET_ENVIRONMENT_VARIABLE(name, buffer)

         ! Extract the value from the buffer

         read(buffer, *) value

         ! Finish

         return

      end subroutine get_env_${S}$_

   #:endfor

   !****

   subroutine get_env_a_(name, value, status)

      character(*), intent(in)               :: name
      character(:), allocatable, intent(out) :: value
      integer, optional, intent(out)         :: status

      integer :: length
      integer :: status_

      ! Read the named environment variable

      ! Determine the variable length

      call GET_ENVIRONMENT_VARIABLE(name, LENGTH=length, STATUS=status_)

      if (PRESENT(status)) then
         status = status_
         if (status_ /= 0) return
      else
         @:ASSERT(status_ == 0, 'error when reading environment variable')
      endif

      ! Read the variable

      if (length > 0) then
         allocate(character(length)::value)
         call GET_ENVIRONMENT_VARIABLE(name, value)
      endif

      ! Finish

      return

   end subroutine get_env_a_

end module system_m
